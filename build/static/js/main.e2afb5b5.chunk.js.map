{"version":3,"sources":["Components/Note.js","Components/services/notes.js","Components/NoteComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","NoteComponent","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2afb5b5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Note from \"./Note\";\nimport axios from \"axios\";\nimport noteService from \"./services/notes\";\n\nexport default function NoteComponent() {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n\n  const toggleImportanceOf = (id) => {\n    console.log(id);\n    console.log(notes);\n    const note = notes.find((n) => n.id === id);\n\n    console.log(note);\n    const changedNote = { ...note, important: !note.important };\n    console.log(changedNote);\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        alert(`the note '${note.content}' was already deleted from server`);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  console.log(\"render\", notes.length, \"notes\");\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  console.log(showAll);\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((notes) => notes.important === true);\n  console.log(showAll);\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Course from \"./Components/course\";\nimport NoteComponent from \"./Components/NoteComponent\";\n\nexport default function App() {\n  const courses = [\n    {\n      name: \"Half Stack application development\",\n      id: 1,\n      parts: [\n        {\n          name: \"Fundamentals of React\",\n          exercises: 10,\n          id: 1,\n        },\n        {\n          name: \"Using props to pass data\",\n          exercises: 7,\n          id: 2,\n        },\n        {\n          name: \"State of a component\",\n          exercises: 14,\n          id: 3,\n        },\n        {\n          name: \"Redux\",\n          exercises: 11,\n          id: 4,\n        },\n      ],\n    },\n    {\n      name: \"Node.js\",\n      id: 2,\n      parts: [\n        {\n          name: \"Routing\",\n          exercises: 3,\n          id: 1,\n        },\n        {\n          name: \"Middlewares\",\n          exercises: 7,\n          id: 2,\n        },\n      ],\n    },\n  ];\n  return (\n    <div>\n      <NoteComponent />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}